查看指令的具体使用方法（以stats为例）：
docker stats --help
其他亦如此

容器使用
获取镜像
如果我们本地没有 ubuntu 镜像，我们可以使用 docker pull 命令来载入 ubuntu 镜像：
docker pull ubuntu

启动容器：
以下命令使用 ubuntu 镜像启动一个容器，参数为以命令行模式进入该容器：
docker run -it ubuntu /bin/bash
参数说明：
-i: 交互式操作。
-t: 终端。
ubuntu: ubuntu 镜像。
/bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。

启动已停止运行的容器
查看所有的容器：
docker ps -a
启动一个已停止的容器：
docker start 容器ID

后台运行
在大部分的场景下，我们希望 docker 的服务是在后台运行的，我们可以通过 -d 指定容器的运行模式。
docker run -itd --name ubuntu-test ubuntu /bin/bash
注：加了 -d 参数默认不会进入容器，想要进入容器需要使用指令 docker exec

重启容器：
docker restart 容器ID

进入容器:
docker exec -it 容器ID /bin/bash 如果从容器退出，不会导致容器的停止；
docker attach 容器ID 如果从容器退出，会导致容器的停止。
推荐使用exec
更多参数说明请使用 docker exec --help 命令查看

导出和导入容器
导出容器:
如果要导出本地某个容器，可以使用 docker export 命令。
docker export 容器ID > ubuntu.tar
命令解析：导出容器快照到本地文件 ubuntu.tar

导入容器:
以下实例将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1:
cat docker/ubuntu.tar | docker import - test/ubuntu:v1

删除容器:
docker rm -f 容器ID
删除容器时，容器必须是停止的，否则会报错。

清理掉所有处于终止状态的容器:
docker container prune

运行一个 web 应用
docker pull training/webapp
docker run -d -P training/webapp python app.py
参数说明:
-d:让容器在后台运行。
-P:将容器内部使用的网络端口映射到我们使用的主机上。
通过 -p 参数来设置不一样的端口:
docker run -d -p 5000:5000 training/webapp python app.py
查看容器端口映射情况(两种方法)：
docker port 容器ID
docker port 容器名称
查看web应用程序日志：
docker logs -f 容器ID
-f: 让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。
查看web应用程序容器的进程：
docker top 容器名称
检查web应用程序：
使用 docker inspect 来查看 Docker 的底层信息。它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。
docker inspect 容器ID

查询最后一次创建的容器：
docker ps -l